*
*	Amiga-specific portions of Galaxian
*
* (c) JOTD 2023
*

.include "../src/galaxian.inc"
.include "custom.i"
.include "exec_lvos.i"
.include "dos_lvos.i"
.include "graphics_lvos.i"

AttnFlags = 128
AFB_68010 = 0
NO68020 = 1

SCREEN_ADDRESS = 0x5000

STATE_ACTIVE = 2
STATE_DO_NOT_UPDATE_SHADOW = 1
STATE_INACTIVE = 0

SCORE_FILE_SIZE = 16*5
BOB_16X16_PLANE_SIZE = 4*16

SPRITE_LIFETIME = 2

* debug: no screen dirty update, no scrolling,
* draws on screen when instructed
*DIRECT_SCREEN_DRAW = 1

	.ifdef	RELEASE
OPT_ENABLE_PROFILING = 0
OPT_ENABLE_LOGGING = 0
ONE_TICK = 1
	* check most used options in release mode
	* to avoid creating a version with cheats on!
	.ifne	OPT_INVINCIBLE
	.error	"cheat option in release mode"
	.endif
	.ifne	OPT_START_AREA-1
	.error	"level select option in release mode"
	.endif
	.ifne	OPT_START_SCORE
	.error	"nonzero score option in release mode"
	.endif
	.else
OPT_ENABLE_LOGGING = 1
OPT_ENABLE_PROFILING = 0
* set to higher values than 1 to speed game up
ONE_TICK = 1
* galaxian still has some strange sprite/clut combinations
* we choose to ignore them as they're completely bogus
* (ex: 95,12: yellow part of andor genesis, makes no sense,
* Mark says that it happens when starting at level > 1 as
* game isn't designed to do this)

	.endif
	
* double-buffering is really needed here, else blits fail
* to race the beam and flicker is very frequent
OPT_ENABLE_DOUBLE_BUFFERING = 1

_custom = 0xDFF000


NB_PLAYFIELD_PLANES = 3
TOTAL_NB_COLORS = 32   | 8+8+16
NB_BYTES_PER_ROW = 40
NB_LINES = 256
Y_MAX = NB_LINES
NB_PLAYFIELD_LINES = NB_LINES+32
* scrollable planes
BG_SCREEN_PLANE_SIZE = NB_BYTES_PER_ROW*NB_PLAYFIELD_LINES
BG_SCREEN_SIZE =  BG_SCREEN_PLANE_SIZE*NB_PLAYFIELD_PLANES
FG_SCREEN_PLANE_SIZE = BG_SCREEN_PLANE_SIZE
FG_SCREEN_SIZE =  FG_SCREEN_PLANE_SIZE*NB_PLAYFIELD_PLANES

NB_SPRITES_TO_UPDATE = 8
NB_SPRITES_TOTAL = 8

BLANK_FG_TILE_ID = 0x24

* sprite backup structure
* total struct size = 32*2, one or two sprites
actsprite_y_clipping = 2
actsprite_orig_ptr = 4
actsprite_copperlist_ptr = 8    | points on first SPRPTL instruction: so +2.W, +6.W are half pointers
actsprite_saved_line = 12       | ends at 12+16 = 28
actsprite_second_sprite = 32   | second sprite... etc... everything repeated

ACTIVE_SPRITE_STRUCT_BITS = 6    | 1<<6 = 64: can hold a slb struct

	move.l	a7,old_stack
	bra	_user

| write current PC value to some address
.macro LOGPC	address
	.ifndef	RELEASE
     bsr    .next_\@
.next_\@:
      addq.l    #6,(a7) | skip this & next instruction
      move.l    (a7)+,0x\address
	.endif
.endm

.macro	WAIT_BLIT
	move.w	#0x8400,dmacon+_custom
wait\@:
	BTST	#6,dmaconr+_custom
	BNE.S	wait\@
	move.w	#0x0400,dmacon+_custom
.endm

.macro MUL_TABLE value,len
mul\value\()_table:
	.set    mulv,0
	.rept	\len
	dc.w	mulv
	.set	mulv,mulv+\value
	.endr
.endm


* debug macro that colors the screen until LMB pressed
.macro 	blitz_bypass
	move.w	d0,-(a7)
	clr.w	d0
loop\@:
	move.w	d0,_custom+color
	btst	#6,0xbfe001
	beq.b	out\@
	addq.w	#1,d0
	bra.b	loop\@
out\@:
	move.w	(a7)+,d0
	nop
.endm

* same thing but if LMB is pressed when entering, macro waits for release)
.macro blitz
w\@:
	btst	#6,0xbfe001
	beq.b	w\@
	blitz_bypass
.endm

    
	
* < D0 as native game offset
* > D0,D1 as amiga X,Y
.macro GET_XY_FROM_OFFSET
	move.w	d0,d1
	subq.w	#2,d1
	and.w	#0x3F,d1	| Y is computed
	lsr.w	#6,d0
	neg.w	d0
	add.w	#32,d0	| mirror: X is computed
.endm

* < D0,D1 as amiga X,Y
* > D0 as plane offset
* > D1 recieves original D1*240 (can be tested against the limit
* for post-processing)
.macro	GET_PLANE_OFFSET_FROM_XY
	* now multiply D1 by 240
	lea		mulNB_BYTES_PER_ROW_table(pc),a1
	.ifdef	NO68020
	add.w	d1,d1
	move.w	(a1,d1.w),d1
	.else
	move.w	(a1,d1.w*2),d1		| times 40
	.endif
	lsl.w	#3,d1		| times 8
	* add y offset to screen data	
	add.w	d1,d0	
	.endm
.macro GET_XY_ADDRESS  base_address
	GET_XY_FROM_OFFSET
	GET_PLANE_OFFSET_FROM_XY	
	* add x offset to screen data
	lea		(\base_address,d0.w),a1
.endm



* exports

	  .global _user
		.global _player_start
		.global _demo_end

* osd layer		
		.global osd_enable_vblank_interrupt
		.global osd_ack_vblank_interrupt
		.global osd_disable_vblank_interrupt
		.global osd_break		| for debug	
		.global osd_calibrate_display		| for debug
		.global osd_w_bg_videoram
		.global osd_reset_attributes
		.global osd_update_graphics
		.global osd_update_sprite_shadow
		.global osd_update_32_sprite_hw
		.global osd_read_dipswitches
		.global osd_read_p1_inputs
		.global osd_read_p2_inputs
		.global osd_read_high_scores
		.global osd_write_high_scores
		.global osd_read_coin
		.global osd_read_start
		.global osd_sound_stop
		.global osd_sound_start
		.global	osd_sound_mute
		.global	osd_sound_unmute
		.global	osd_stars_on
		.global	osd_stars_off

	
	.include	"ReadJoypad.i"
	.include	"whdload_funcs.i"
		.text


.list

	.ifne	OPT_ENABLE_PROFILING
	* init profiling if enabled
	.include	"profiler.68k"
	.endif

	    
_user:
    * if D0 contains "WHDL"
    * A0 contains resload
        
    cmp.l   #0x05748444c,D0	| WHDL
    bne.b   .standard
    move.l a0,_resload
    *move.b  d1,_keyexit

	move.l	a0,a2
	lea	(_tag,pc),a0
	jsr	(resload_Control,a2)
	
    bra		.no_forbid
.standard:
	
    * open dos library, graphics library
    move.l  0x4.W,a6
    lea dosname,a1
    moveq.l #0,d0
    jsr _LVOOpenLibrary(a6)
    move.l  d0,_dosbase

	move.l	#read_args_string,d1
	move.l	#program_args,d2
	moveq.l	#0,d3
	move.l	_dosbase,A6
	jsr	_LVOReadArgs(a6)

	move.l	d0,rdargs_struct		| NULL is OK
	bne	0f
	jmp		_LVOExit(a6)
0:	
	lea		program_args,a0
	move.l	(A0)+,D0	| STARTLIVES/K/N
	beq.b	1f
	move.l	d0,a1
	move.l	(a1),d0
	and.l	#3,d0
	move.l	d0,start_lives
1:
	move.l	(A0)+,D0	| SKILL/K/N
	beq.b	1f
	move.l	d0,a1
	move.l	(a1),d0
	and.l	#3,d0
	move.l	d0,difficulty_level
1:
	move.l	(A0)+,D0	| STARTAREA/K/N
	beq.b	1f
	move.l	d0,a1
	move.l	(a1),d0
	subq.l	#1,d0
	and.l	#0xF,d0
	move.l	d0,start_area_option
1:
	move.l	(A0)+,D0	| INVINCIBLE/S
	beq.b	1f
	or.l	#1,cheat_flags
1:
	move.l	(A0)+,D0	| INFLIVES/S
	beq.b	1f
	or.l	#2,cheat_flags
1:




	move.l	rdargs_struct,d1
	jsr		_LVOFreeArgs(a6)

	bsr		store_system
	
	lea		_custom,a5
	lea		debug_copperlist,a0
	move.l	a0,cop1lc(a5)

	move.l	4.W,A6
	lea graphicsname,a1
    moveq.l #0,d0
    jsr _LVOOpenLibrary(a6)
    move.l  d0,_gfxbase
    move.l	d0,a6
	move.l	38(a6),old_syscoplist
	move.l	34(A6),old_actiview		| gb_ActiView

	sub.l	a1,a1
	jsr	_LVOLoadView(a6)
	jsr	_LVOWaitTOF(a6)
	jsr	_LVOWaitTOF(a6)

	bsr		load_highscores

    * check if "floppy" file is here
    
    move.l  _dosbase(pc),a6
    move.l   #floppy_file,d1
    move.l  #1005,d2   | MODE_OLDFILE
    jsr     _LVOOpen(a6)
    move.l  d0,d1
    beq.b   .no_floppy
    
    * "floppy" file found
    jsr     _LVOClose(a6)
    * wait 2 seconds for floppy drive to switch off
    move.l  #100,d1
    jsr     _LVODelay(a6)
.no_floppy:

.startup:

* no multitask
    tst.l   _resload
    bne.b   .no_forbid
    *move.l  _gfxbase(pc),a4
    *move.l StartList(a4),gfxbase_copperlist

    move.l  4,a6
    jsr _LVOForbid(a6)

    
	sub.l	A1,A1
	jsr	_LVOFindTask(a6)		| find ourselves
	move.l	D0,A0
	move.l	#-1,184(A0)	| pr_WindowPtrÂ no more system requesters (insert volume, write protected...)

.no_forbid:
	move.l	start_lives(pc),d2
	neg.w	d2
	addq	#3,d2
	lsl.w	#5,d2
	move.w	d2,start_lives_dsw
	
	move.l	difficulty_level(pc),d2
	neg.w	d2
	addq	#3,d2
	lsl.w	#5,d2
	move.w	d2,difficulty_level_dsw
	
	
	jsr	 _detect_controller_types 


		moveq			#2,d0
		*move.b		(BIOS_USER_REQUEST),d0
		lsl.w			#2,d0
    movea.l   1f(pc,d0.w),a0
    jmp       (a0)
    .align 4
1:	.long			startup_init
		.long			eye_catcher
		.long			demo_game
		.long			title_display

startup_init:
		rts

eye_catcher:
* we're not doing things the NeoGeo way
		rts

get_hiscore_name:
    lea normal_hiscorename,a0
	rts
	
load_highscores:
	bsr.b		get_hiscore_name
    move.l  _resload(pc),d0
    bne.b   1f

    move.l  _dosbase(pc),a6
    move.l  a0,d1
    move.l  #1005,d2
    jsr     (_LVOOpen,a6)
    move.l  d0,d1
    beq.b   1f
    move.l  d1,d4
    move.l  #SCORE_FILE_SIZE,d3
    move.l  #high_score_buffer,d2
    jsr (_LVORead,a6)
    move.l  d4,d1
    jsr (_LVOClose,a6)   
	st.b	highscore_loaded
1:
    rts

save_highscores:
	tst.l	_resload
	bne.b	1f
    tst.b   highscore_needs_saving
    beq.b   1f
    move.l  _dosbase(pc),a6
	bsr.b		get_hiscore_name
    move.l  a0,d1
    move.l  #1006,d2
    jsr     (_LVOOpen,a6)
    move.l  d0,d1
    beq.b   1f
    move.l  d1,d4
    move.l  #SCORE_FILE_SIZE,d3
    move.l  #high_score_buffer,d2
    jsr (_LVOWrite,a6)
    move.l  d4,d1
    jsr (_LVOClose,a6)   
1:	
    rts
    
	
* To get the core to run, you just need to jump to galaxian_reset after
* you've initialised the platform (Amiga) stuff. That essentially does a
* Z80 reset. You also need to call galaxian_im1_irq from the Amiga vblank
* routine. They are the only 2 entry points required for the core to run,
* even if there's no other I/O.


demo_game:
		move		#0x4000,_custom+intena						| disable interrupts
		move		#0x7FFF,_custom+intreq						| ack all interrupts
		bsr			platform_init					| amiga-specific init
		move.l	cheat_flags(pc),d0
		btst	#0,D0
		sne		invincible_flag
		btst	#1,D0
		sne		infinite_lives_flag
		
0:	
		jmp			galaxian_reset					| pass control to the galaxian core
		
title_display:
* we're not doing things the NeoGeo way
    rts

_player_start:
* we're not doing things the NeoGeo way
		rts
				
_demo_end:
* we're not doing things the NeoGeo way
		rts
	
				
_vblank:
    movem.l d0-d7/a0-a6,-(a7)
	move.w	_custom+intreqr,d0
	btst	#5,d0
	beq.b		1f

	move.l	_joypad_state(pc),d1
	moveq	#1,d0
	jsr	_read_joystick
	move.l	d0,_joypad_state
	btst	#JPB_BTN_PLAY,d0
	beq.b	0f
	btst	#JPB_BTN_PLAY,d1
	bne.b	0f
	bsr		toggle_pause
0:

	* if music loops, no need to play it again and again
	* ticks aren't important either
	tst.b	music_loops
	bne.b	13f
	* here music doesn't loop. We have to stop it when it ends
	move.w	music_tick(pc),d1
	beq.b	13f
	subq.w	#1,d1
	move.w	d1,music_tick
	bne.b	13f
	* only music that doesn't loop: intro music
	* now it's over so let other tunes play
	clr.b	sound_lock

	* don't play in-game loop
	move.w	#SOLVALOU_SND,d0
	bsr		osd_sound_stop
13:
	move.w	#0x20,_custom+intreq	
	bra.b	3f
1:
	* has to be copper
	* we're going to ack copper interrupt now
	move.w	#0x10,_custom+intreq
	
	moveq	#ONE_TICK,d1
    move.w  vbl_counter(pc),d0
    addq.w  #1,d0
    cmp.w   #5,d0
    bne.b   22f
    * update a second time, simulate 60Hz
	moveq	#ONE_TICK*2,d1
	clr.w d0    
22:
	move.b	d1,vb_ticks_count
    move.w  d0,vbl_counter
	
	tst.b	pause_flag
	bne.b	23f
	
	jsr		galaxian_irq
	.ifne  OPT_ENABLE_DOUBLE_BUFFERING
	bsr		switch_screen_buffers
	.endif
23:
	* now we check copper interrupt again
	move.w	_custom+intreqr,d0
	btst	#4,d0
	beq.b	3f		| clear: ok
	* copper interrupt has been called, which means that
	* rendering was so slow that we couldn't cope within a frame
	* skip a tick and ack again, we lose one update frame
	addq.b	#ONE_TICK,vb_ticks_count
	move.w	#0x10,_custom+intreq
3:
    movem.l (a7)+,d0-d7/a0-a6
	
    rte
	
osd_break:
	blitz
	rts
	
osd_calibrate_display:
	movem.l	a0/d0-d1,-(a7)
	lea		bg_screen_data,a0
	move.w	#NB_LINES-1,d1
	clr		d0
0:
	st.b	(8,a0,d0.W)
	st.b	(9,a0,d0.W)
	st.b	(10,a0,d0.W)
	
	add.w	#NB_BYTES_PER_ROW,d0
	dbf		D1,0b
	movem.l	(a7)+,a0/d0-d1
	rts

	move.l	fg_drawed_screen_ptr,a0
	move.w	#NB_LINES-1,d1
	clr		d0
0:
	st.b	(14,a0,d0.W)
	st.b	(15,a0,d0.W)
	add.w	#NB_BYTES_PER_ROW,d0
	dbf		D1,0b
	movem.l	(a7)+,a0/d0-d1
	rts
	
osd_sound_mute:
	st.b	sound_muted
	rts
	
osd_sound_unmute:
	clr.b	sound_muted
	rts
	
osd_sound_start:
	movem.l	d0/a0/a6,-(a7)
	cmp.w	#SOLVALOU_EXPLOSION_SND,d0
	bne.b	0f
	* remove music locking all sounds when player
	* is hit while music is playing
	clr.b	sound_lock
0:
	tst.b	sound_lock
	bne.b	1f
	* coin sound overrides muted sound
	* (but not locked sound when start music is playing)
	cmp.w	#COIN_SND,d0
	beq.b	0f
	tst.b	sound_muted
	bne.b	1f
0:
	lea		_custom,a6
	lsl.w	#3,d0
	lea		sound_table,a0
	move.w	(a0,d0.w),d1	| sound type
	beq.b	1f		| no sound


	* andor genesis is also special, we need to workaround
	* the constant replay and let the replayer "loop"

	cmp.w	#MAIN_THEME_SND*8,d0
	bne.b	2f
	* special case: we have to lock solvalou
	* looped music (and all other sounds!!)
	* until this one has ended
	st.b	sound_lock
2:
	cmp.w	#1,d1
	bne.b	3f		| music module
	move.l	(4,a0,d0.w),a0
	lea		_custom,a6
	jsr		_mt_playfx
1:
	movem.l	(a7)+,d0/a0/a6
	rts
3:
	* don't play if already playing
	* (music_tick value is not important for looped tunes
	* as long as it's not zero)
	tst.w	music_tick
	bne.b	4f
	* play the proper module pattern
	* load up the countdown if loop
	move.w	(2,a0,d0.w),d1	| pattern number in .mod file
	move.w	(4,a0,d0.w),d2
	move.b	(6,a0,d0.w),music_volume
	move.b	(7,a0,d0.w),music_loops
	move.w	d1,music_pattern
	move.w	d2,music_duration
	* since it's not zero, next vbl tick will play the music
	move.w	d2,music_tick
	move.w	d1,d0
	bsr		play_music
4:
	bra.b	1b

	
* sound stop is only called on sounds that are
* actually tunes. It's also called on bomb but we'll skip it
* that since it's harmful to music replay
osd_sound_stop:
	movem.l	d0/a6,-(a7)
	cmp.w	#BOMB_SND,d0
	beq.b	0f		| stop bomb sound makes no sense and stops the music!!
	lea		_custom,a6
    clr.w   music_tick   | not playing anymore
	clr.b	music_playing
    jsr		_mt_end
0:
	movem.l	(a7)+,d0/a6
	rts
	
* < D0: track start number
play_music:
	rts
	
	
osd_kick_wdog:
    rts
	.ifne	OPT_ENABLE_DOUBLE_BUFFERING
switch_screen_buffers:	
	* let's switch screen buffers
	* toggle fg planes (double buffering)
	lea		fg_drawed_screen_ptr(pc),a0
	lea		fg_displayed_screen_ptr(pc),a4
	lea		fg_screen_data_1,a1
	lea		fg_screen_data_2,a5
	* also switch previous state memory
	lea		previous_sprite_state_1(pc),a3
	lea		previous_sprite_state_ptr(pc),a2
	cmp.l	(a0),a1
	bne.b	2f
	* screen data 1 is displayed screen
	* set it to drawn screen
	exg		a1,a5
	lea		previous_sprite_state_2(pc),a3
2:
	move.l	a3,(a2)
	move.l	a1,(a0)
	move.l	a5,(a4)
	bra		set_fg_bitplanes
	.endif
	
store_system:
	tst.l	_resload
	beq.b	0f
	rts
0:
	* system copper
	
	move.l	4,a6
	move.w	AttnFlags(a6),d0
	btst	#AFB_68010,d0
	beq.b	1f
	lea	zero_vbr,a5
	jsr		_LVOSupervisor(a6)
1:

	lea	_custom,a6
	move.w	intenar(a6),old_intena
	move.w	dmaconr(a6),old_dmacon
	lea		old_sysvectors,a0
	move.l	0x64.w,(a0)+
	move.l	0x68.w,(a0)+
	move.l	0x6c.w,(a0)+
	move.l	0x70.w,(a0)+
	move.l	0x74.w,(a0)+
	move.l	0x78.w,(a0)+
	rts

restore_system:
	lea	_custom,a6
	jsr		_mt_remove_cia

	move.w	#0x4000,intena(a6)	| ints off
	lea		old_sysvectors,a0

	move.l	(a0)+,0x0064
	move.l	(a0)+,0x0068
	move.l	(a0)+,0x006c
	move.l	(a0)+,0x0070
	move.l	(a0)+,0x0074
	move.l	(a0)+,0x0078


	bclr	#6,0xbfee01
	move.l	4,a0
	move.w	AttnFlags(a0),d0
	btst	#AFB_68010,d0
	beq.b	1f
	jsr		restore_vbr

1:

	lea	_custom,a6
	move.w	old_intena,d0			| get old val
	and.w	#0x3fff,d0
	eor.w	#0x3fff,d0
	move.w	d0,intena(a6)		| clr bits
	eor.w	#0x3fff,d0
	or.w	#0xc000,d0		
	move.w	d0,intena(a6)		| set bits and main

	move.w	old_dmacon,d0			| get old val
	and.w	#0x3fff,d0
	eor.w	#0x3fff,d0

***		and.w	#0xfff0,d0		| preserve sound dma for now

	move.w	d0,dmacon(a6)		| clr bits



	eor.w	#0x3fff,d0
	or.w	#0xc000,d0		
	move.w	d0,dmacon(a6)		| set bits and main

	move.l	old_syscoplist,cop1lc(a6)
	move.l	_gfxbase,a6
	move.l	old_actiview,a1
	jsr	_LVOLoadView(a6)


	moveq	#0,d0
	rts

quit_to_os:
	bsr		restore_system
	move.w	#0,SR
	move.l	old_stack(pc),a7
	bsr		save_highscores
	moveq	#0,d0
	rts
	

platform_init:
	bsr		store_system
	
	lea		_custom,a5
	move.w	#0x7FFF,dmacon(a5)
	* set blitter parameters once and for all
	.ifndef	VARIABLE_BLITTER_MASKS_AND_MODS
    move.l  #-1,bltafwm(a5)
	.endif
	
	* restrict borders: we don't see bobs on the borders!
    move.w #0x1C99,diwstrt(a5)
    move.w #0x1C81-8,diwstop(a5)
    move.w #0x0038,ddfstrt(a5)
    move.w #0x00D0,ddfstop(a5)
    move.w #0x6600,bplcon0(a5) | 6 bitplanes, dual playfield
    move.w #0,bplcon2(a5)          | no priority (sprite starfield behind)
    move.w #0,bplcon3(a5)          | no AGA

    move.w #0,fmode(a5)
	
	* there's a 2-pixel shift between foreground layer
    * and background layer, can be seen in the title
	* screen with galaxian bg/fg tiles
    **move.w #2<<4,bplcon1(a5)    | foreground tiles shifted by 2 pixels
    move.w #0,bplcon1(a5)    | foreground tiles
	move.w	#0,d0
    move.w d0,bpl1mod(a5)
    move.w d0,bpl2mod(a5)

	bsr		create_direction_table
	bsr		set_fg_bitplanes
	bsr		set_bg_bitplanes

	
	* load palette
	bsr		load_palette_in_copperlist
	* set copperlist
	move.l	#copperlist,cop1lc(a5)
	
    * init sprite, bitplane, whatever dma

    move.w #0x83E0,dmacon(a5)

	* install keyboard and vblank/copper handler
	pea		level2_interrupt(pc)
	move.l	(a7)+,0x68.W
	pea		_vblank(pc)
	move.l	(a7)+,0x6C.W

	* soundfx lib
	lea		_custom,a6
	sub.l	a0,a0	| we know vbr=0
	moveq	#1,d0	| PAL
	jsr		_mt_install_cia

	.ifne	OPT_ENABLE_PROFILING
	* init profiling if enabled
	lea		0x180000,a0
	move.l	#0x20000,d0
	lea		0x100,a1
	bsr		init_fixed_address
	bsr		install_profiler_vbl_hook
	.endif

	
    rts

	
load_palette_in_copperlist:
	movem.l	d0-d1/a1,-(a7)
	lea		palette,a0
	move.w	#TOTAL_NB_COLORS-1,d0
	lea		copperlist_colors+2,a1
1:
	move.w	(a0)+,(a1)+
	add.w	#2,a1
	dbf		d0,1b
	movem.l	(a7)+,d0-d1/a1
	rts
	

* 60Hz VBLANK interrupt (also keyboard)
osd_enable_vblank_interrupt:
	move.w	#0xC038,_custom+intena
	rts

osd_ack_vblank_interrupt:
	move.w	#0x30,_custom+intreq
 	rts
		
osd_disable_vblank_interrupt:
	move.w	#0x0030,_custom+intena
	rts
		

* 32 couple of values.
* 2 bytes: offset 0: scroll value, 1: palette clut

osd_reset_attributes:
    .ifeq OPT_DISABLE_BG_LAYER
	movem.l	d0-d2/a0-a4,-(a7)
	lea		bg_color_table,a1
	lea		bg_cluts,a2
	lea		bg_colorram,a5
	move.w	#32-1,d0
	moveq	#0,d2
0:
	clr.w	d1
	clr.w	(a5)+
	move.b	d1,d2
	lsl.w	#3,d2				| offset of clut
	lea		(2,a2,d2.w),a3		| skip first black color
	* now change copperlist for this line
	move.l	(a1)+,a4
	move.w	(a3)+,(2,a4)
	move.w	(a3)+,(6,a4)
	move.w	(a3)+,(10,a4)
	dbf		d0,0b
	movem.l	(a7)+,d0-d2/a0-a4
   .endif | OPT_DISABLE_BG_LAYER
	rts

* < A0: pointer on attributes/sprites/bullets
* 32 couple of values.
* 2 bytes: offset 0: scroll value, 1: palette clut
* 5800-583F   01011AAAAAAAAAAA R/W DDDDDDDD   !OBJRAM Screen attributes
* 5840-585F   01011AAAAAAAAAAA R/W DDDDDDDD   !OBJRAM Sprites
* 5860-5FFF   01011AAAAAAAAAAA R/W DDDDDDDD   !OBJRAM Bullets
* so pointer points to
* - 0x40 bytes of attributes (2 byte per "column" - actually a row)
* - 0x20 bytes of sprites
* - 0x20 bytes of bullets

osd_update_graphics:
	movem.l	d0-d7/a0-a6,-(a7)
    .ifeq OPT_DISABLE_BG_LAYER
	lea		bg_color_table,a1
	lea		bg_cluts,a2
	lea		bg_colorram,a5
	lea		scroll_and_dirty_rows_values(pc),a6
	
	move.w	#32-1,d0
	moveq	#0,d2
0:
	move.w	(a0)+,d1
	move.w	d1,(a5)+
	move.b	d1,d2
	lsl.w	#3,d2				| offset of clut
	lsr.w	#8,d1
	
	cmp.b	(1,a6),d1			| check previous scroll value
	beq.b	1f
	st.b	(a6)				| mark row as dirty
	move.b	d1,(1,a6)			| store scroll values
1:
	addq.w	#2,a6
	lea		(2,a2,d2.w),a3		| skip first black color
	* now change copperlist for this line
	move.l	(a1)+,a4
	move.w	(a3)+,(2,a4)
	move.w	(a3)+,(6,a4)
	move.w	(a3)+,(10,a4)
	dbf		d0,0b
	* update dirty lines
	.ifndef	DIRECT_SCREEN_DRAW
	bsr		update_rows
	.endif
   .endif | OPT_DISABLE_BG_LAYER
	
	* load previous sprite state base
	* (depending on screen buffer, double buffering)
	
	move.l		previous_sprite_state_ptr(pc),a5

	* delete previous sprites
	bsr		delete_previous_sprites
	
	* now A0 contains sprite data
	move.l	a0,0x100
	**lea		test_sprite_data(pc),a0
	
	bsr		draw_sprites
	
	* now A0 contains bullet data
	
	movem.l	(a7)+,d0-d7/a0-a6
	rts

draw_sprites:
	movem.l	a2/a5,-(a7)
	move.w	#NB_SPRITES_TOTAL-1,d3
	moveq	#0,d0
	moveq	#0,d1
	moveq	#0,d6
	moveq	#0,d5
	move.l	a0,a2
2:
	* get sprite x,y,clut,index
	move.l	(a2)+,d4
	* save in previous
	move.l	d4,(a5)+
	move.l	d4,d7
	and.l	#0xFF0000FF,d7
	cmp.l	#0xF80000F8,d7	| X=Y=0xF8: means disabled
	beq.w	11f
	bsr		decode_sprite_data
	lea		sprite_table,a1
	move.b	d6,d2		| save attributes xflip/yflip
	and.w	#0x3F,d6	| mask attributes
	add.w	d6,d6
	add.w	d6,d6
	move.l	(a1,d6.w),d7
	beq.b	11f			| invalid sprite
	move.l	d7,a1
	* todo check attributes (flip X/Y)
	and.w	#7,d5		| mask attributes
	add.w	d5,d5
	add.w	d5,d5
	move.l	(a1,d5.w),d7
	beq.b	11f			| invalid clut index
	move.l	d7,a1
	move.w	(a1)+,d7	| type
	bne.b	11f			| sprite: ATM not supported
	* BOB
	btst	#7,d2
	beq.b	3f
	* YFlip: get mirrored version
	addq.w	#4,a1
3:
	move.l	(a1),a0		| BOB data
	bsr		blit_16x16_bob
11:
	dbf		d3,2b
	move.l	a2,a0
	movem.l	(a7)+,a2/a5
	rts

delete_previous_sprites:
	movem.l	a0-a2/a5,-(a7)

	move.w	#NB_SPRITES_TOTAL-1,d3
	moveq	#0,d0
	moveq	#0,d1
	moveq	#0,d6
	moveq	#0,d5
2:
	move.l	(a5)+,d4
	move.l	d4,d7
	and.l	#0xFF0000FF,d7
	cmp.l	#0xF80000F8,d7	| X=Y=0xF8: means disabled
	beq.w	11f
	* get data
	bsr		decode_sprite_data

	
*	move.b	(2,a5),d0    | sprite tile code (8 first bits)

*	tst.b	(a6,d0.w)
*	bne.w	11f		| real sprite: skip erase
	* erase previous sprite position (but not if sprite type
	* is hardware sprite)

	move.w	#4,d2	| width
	* depending on double height/width properties, double amounts

    move.w  #16,d4		| max single size height

	movem.l	d3/a5,-(a7)
    lea _custom,a5
	move.l	fg_drawed_screen_ptr(pc),a1
	moveq	#3,d3
	bsr		clear_planes_any_blitter_internal
	movem.l	(a7)+,d3/a5
11:
	dbf		d3,2b
	movem.l	(a7)+,a0-a2/a5
	rts
	
* < D4: sprite properties
* > D0,D1: X,Y.B
* > D5: clut index
* > D6: sprite index
* 
decode_sprite_data:
	move.b	d4,d1	| sprite X (aka Y on amiga)
	lsr.l	#8,d4
	move.b	d4,d5	| clut index
	lsr.l	#8,d4
	move.b	d4,d6	| sprite index
	lsr.l	#8,d4	
	move.b	d4,d0	| sprite Y (aka X on amiga)
	rts
	
* sprite structure: 4 bytes: X,sprite_id (with attributes),clut_index,Y

test_sprite_data:
	.byte	0xF8,0x00,0x00,0xF8,0xF8,0x00,0x00,0xF8,0xF8,0x00,0x00,0xF8,0xF8,0x00,0x00,0xF8
	.byte	0x40,0x11,0x04,0x10,0xF8,0x00,0x00,0xF8,0xF8,0x00,0x00,0xF8,0xF8,0x00,0x00,0xF8
	.byte	0x2F,0x11,0x04,0xC4,0x2F,0x11,0x03,0xB4,0x2F,0x11,0x02,0xA4,0x2F,0x29,0x01,0x94

* d6=screen address (preserved), d0=tile (preserved)
* d6 starts at 0x5000 ends at 0x57FF
* should preserve all registers

osd_w_bg_videoram:
    .ifeq OPT_DISABLE_BG_LAYER
	movem.l	d0-d3/d6/a0-a2,-(a7)
	sub.w	#SCREEN_ADDRESS,d6
	cmp.w	#0x800,d6
	bcs.b	1f
	* should not happen
	bsr		osd_break
	move.w	#0,d6
1:
	lea		bg_videoram,a1
	add.w	d6,a1
	cmp.b	(a1),d0
	beq.b	0f		| already the proper value
	move.b	d0,(a1)	| update logical grid
	jbsr		update_bg_tile
0:
	movem.l	(a7)+,d0-d3/d6/a0-a2
    .endif | OPT_DISABLE_BG_LAYER
	rts

	
	
update_rows:
    movem.l d0-d7/a0-a6,-(a7)
    lea _custom,A5
	
	clr.w	d6
	lea		scroll_and_dirty_rows_values(pc),a4
	lea		bg_screen_backbuffer,a3
	lea		bg_screen_data,a6
0:
	tst.b	(a4,d6.w)
	jeq		5f
	clr.b	(a4,d6.w)	| ack as clean
	* now blit the dirty row
	moveq	#0,d0
	move.b	(1,a4,d6.w),d0		| scroll offset
	*moveq	#0,d0		| TEMP no scroll
	move.w	#NB_BYTES_PER_ROW,d2
	move.w	d0,d3
	lsr.w	#3,d3		| divide by 8 to get byte shift
	sub.w	d3,d2		| change width depending on scroll offset
	moveq	#8,d4		| height
	move.l	a3,a0		| source (current row)
	move.l	a6,a1		| dest (current row)

    add.w   d3,a1       | X-offset plane position
    move.l  #0x09f00000,d3    | A->D copy, ascending mode

	move.w	#NB_BYTES_PER_ROW,d1

    sub.w   d2,d1       | blit modulo
    lsl.w   #6,d4
    lsr.w   #1,d2
    add.w   d2,d4       | blit height

	* insert shifting in D3 bltcon config
	and.w	#0xF,d0		| shifting 0-15
	* apply to bltcon (destination)
    swap    d0
    clr.w   d0
    lsl.l   #8,d0
    lsl.l   #4,d0
    or.l    d0,d3
	
    * always the same settings

    * now just wait for blitter ready to write all registers
	WAIT_BLIT
    
    * blitter registers set

	move.l d3,bltcon0(a5)	| sets con0 and con1

    move.w  d1,bltamod(a5)	|A modulo
    move.w  d1,bltdmod(a5)	|D modulo
							
	move.l a0,bltapt(a5)	|source graphic top left corner
	move.l a1,bltdpt(a5)	|destination top (bottom) left corner
	move.w  d4,bltsize(a5)	|rectangle size, starts blit
	
	add.w	#BG_SCREEN_PLANE_SIZE,a0
	add.w	#BG_SCREEN_PLANE_SIZE,a1
	WAIT_BLIT
	* second bitplane
	move.l a0,bltapt(a5)	|source graphic top left corner
	move.l a1,bltdpt(a5)	|destination top (bottom) left corner
	move.w  d4,bltsize(a5)	|rectangle size, starts blit
5:
	add.w	#NB_BYTES_PER_ROW*8,a3	| 2 planes
	add.w	#NB_BYTES_PER_ROW*8,a6	| 2 planes
	addq.w	#2,d6
	cmp.w	#NB_LINES/4,d6
	jne		0b
	movem.l	(a7)+,d0-d7/a0-a6
	rts
	
	
* d6: screen offset
* d0: tile code
* d1: attribute
update_bg_tile:
	* compute Y
	and.w	#0xFF,d0	| mask up to 255
	move.w	d6,d3
	lsr.w	#5,d6		| this is X
	neg.w	d6
	add.w	#32,d6
	and.w	#0x1F,d3	| this is Y
	* mark row as dirty
	lea		scroll_and_dirty_rows_values(pc),a1
	add.w	d3,d3
	st.b	(a1,d3.w)
	* multiply by 240
	lea		mulNB_BYTES_PER_ROW_table(pc),a0
	.ifdef	DIRECT_SCREEN_DRAW
	lea		bg_screen_data,a1
	.else
	lea		bg_screen_backbuffer,a1
	.endif
	move.w	(a0,d3.w),d3
	lsl.w	#3,d3		| times 8
	add.w	d3,a1
	add.w	d6,a1
	* optimization when a well-known
	* empty character is passed
	cmp.b	#0x10,d0	| empty character
	jeq	1f
	cmp.b	#0x2B,d0	| empty characters (0x2C-0x2F)
	jcs	0f
	cmp.b	#0x30,d0
	jcs	1f
0:
	lea		character_table,a0
	add.w	d0,d0
	add.w	d0,d0
	move.l	(a0,d0.w),d0
	jeq	1f
	move.l	d0,a0
	.set	offset,0
	.rept	8
	move.b	(a0)+,(offset,a1)	
	.set	offset,offset+NB_BYTES_PER_ROW
	.endr
	.set	offset,0
	.rept	8
	move.b	(a0)+,(offset+BG_SCREEN_PLANE_SIZE,a1)
	.set	offset,offset+NB_BYTES_PER_ROW
	.endr
0:
	rts
1:
	.set	offset,0
	.rept	8
	clr.b	(offset,a1)
	clr.b	(offset+BG_SCREEN_PLANE_SIZE,a1)
	.set	offset,offset+NB_BYTES_PER_ROW
	.endr
	rts
		


* d0 = base sprite number (0/32)
*
* Since sprites aren't really sprites but BOBs
* updating only the relevant half of
* the sprites trashes the other half when pre-erasing
* the latter sprites if some sprites had been previously
* drawed here. This and also leftovers of BOBs when player
* is killed. So, too complicated, let's update everything
* just store the previous positions only by half (because the
* others aren't updated anyway)


is_hw_sprite_table:
	ds.b	256



* show sprite, supports clipping (y offset)
* < A1: sprite data
* < A4: pointer on the sprite backup table
* < D0: X
* < D1: Y
* < D2: height
* < D3: y offset (clipping)
* < D6: amiga sprite number (0-7)

show_sprite:
	movem.l	d2-d6/a0/a2-a5,-(a7)
	* store it in sprite table structure
	* A4 is a pointer on the sprite display table
	* add a lifetime of 2 updates each time called, we'll
	* update with the pointer on the sprite structure later
	
	lea		active_hw_sprite_lifetime,a0
	lsl.w	#3,d6
	add.w	d6,a0
	move.w	#SPRITE_LIFETIME,(a0)+
	move.l	A4,(a0)
	
	moveq	#0,d5
	move.w	(actsprite_y_clipping,a4),d5	| previous y clipping offset
	* here handle bogus Y clip = 32 out of nowhere
	bne.b	0f
	* previous y clip = 0, current clip 32: bogus first
	* andor position, skip display
	cmp.w	#32,d3
	jeq		10f
	bra.b	7f			| no clipping to restore from previous
0:
	cmp.w	D3,d5
	beq.b	7f			| no need to restore: sprite has the same pos
	* restore previous sprite bitmap line
	lea	(actsprite_saved_line.W,a4),a2	| source
	lsl.l	#4,d5
	lea		(a1,d5.l),a5	| destination
	lsr.l	#4,D5	| restore D5 value for correctness (D3 and D5 are compared again)
	* copy 16 bytes back to restore sprite line
	* but we have to make sure that the beam is not too high
	* else sprite flickers a lot. Ironically this happens
	* with fast machines, not with slow machines
	*WAIT_BEAM_SPRITE
	
	move.l	(a2)+,(a5)+
	move.l	(a2)+,(a5)+
	move.l	(a2)+,(a5)+
	move.l	(a2),(a5)
7:
	* store a1 in backup BEFORE adding offset to it
	move.l	a1,(actsprite_orig_ptr,a4)

	move.w	D3,(actsprite_y_clipping,a4)  | store previous offset
	beq.b	8f
	* clipping enabled

	swap	d3
	clr		d3
	swap	d3
	* must move sprite start & put position here
	* first we back up sprite data
	lsl.l	#4,D3
	* add offset to sprite pointer to start by that line
	add.l	D3,a1
	lsr.l	#4,D3	| restore D3 value for next loop

	* don't save: sprite has the same pos as before, this
	* would clobber the backup
	
	cmp.w	D3,d5
	beq.b	8f

	lea	(actsprite_saved_line.W,a4),a5			| destination
	move.l	a1,a2	| source
	
	* copy 16 bytes to sprite line backup space
	* and zero that sprite line so 
	* it can be used as X/Y sprite first line
	*WAIT_BEAM_SPRITE
	.rept	4
	move.l	(a2),(a5)+
	clr.l	(a2)+
	.endr
8:
	* same position as bobs: shift X by 8
	subq.w	#8,d0
	bsr		store_sprite_pos
	move.w	d0,(8,a1)
	swap	d0
	move.w	d0,(a1)
	* put it in the proper sprite slot (d6: sprite number)
	move.l	a1,d0
	lea		sprites,a1
	lea		(a1,d6.w),a1	| times 8, but d6 is already *8 at this point
	move.l	a1,(actsprite_copperlist_ptr,a4)
	move.w	d0,(6,a1)
	swap	d0
	move.w	d0,(2,a1)
10:
	movem.l	(a7)+,d2-d6/a0/a2-a5
	
	rts
	
* we have to restore backuped line if Y offset was != 0
* we have to reset sprite pointer to original in copperlist
* in case it's been y-clipped
* (else it's pointing on the clipped sprite in the copperlist
* and we are going to restore the sprite data at this line)
*
* < A1: sprite backup structure (if zero, skip)
* destroyed registers: none

hide_sprite:
	movem.l	d0/a2-a3,-(a7)
	move.l	(actsprite_orig_ptr,a1),a2
	move.l	a2,d0
	beq.b	11f
	move.l	(actsprite_copperlist_ptr,a1),a3
	move.w	d0,(6,a3)
	swap	d0
	move.w	d0,(2,a3)
	* nullify pointer
	clr.l	(actsprite_orig_ptr,a1)
	* now set coords to zero
	clr.w	(a2)
	clr.w	(8,a2)
	move.w	(actsprite_y_clipping,a1),d0
	beq.b	11f		| no need to restore
	* we need to restore backuped line
	lsl.w	#4,d0	| times 16
	add.w	d0,a2	| destination to be restored
	lea		(actsprite_saved_line.W,a1),a3
	* restore sprite data
	move.l	(a3)+,(a2)+
	move.l	(a3)+,(a2)+
	move.l	(a3)+,(a2)+
	move.l	(a3),(a2)
	* zero clipping to be coherent
	* (we're using it as "previous clipping offset" too)
	clr.w	(actsprite_y_clipping,a1)
11:
	movem.l	(a7)+,d0/a2-a3
	rts

	
* < D0: sprite index times 64 (for lifetime table)
* < D1: color table index
* < D2: sprite height
* < D3.L: Y-offset (for clipping in the top area)
* < D4: Y
* < D5: X
* < A3: graphical object structure (sprites)

draw_hw_sprite:
	movem.l	d6/a2/a4-a6,-(a7)
	* X in D5
	* Y in D4
	* set a lifetime in sprite table
	lea		active_hw_sprite_display_table(pc),a4
	
	add.w	d0,a4
	lea	(2,a3,d1.w),a0

	
5:
	move.w	(a0)+,d6	| sprite number
	bmi		21f			| end of sprite chain
	* load palette in the proper copperlist slots for this sprite
	move.w	d6,d1
	lsr.w	#1,d1
	bcs.b	51f

	* even: select range 48-63 (next shift makes it times 32)
	* this is not ok for ECS... to change
	add.w	#4,d1
51:
	lsl.w	#4,d1	| times 16
	lea	sprite_cols,a1

	add.w	d1,a1
	moveq	#3,d0	| 4 colors
6:
	move.w	(a0)+,(2,a1)
	addq.w	#4,a1
	dbf		d0,6b


	*moveq	#0,d0		| we need to clear MSB, already done above
	* get sprite data
	move.l	(a0)+,a1

	* restore coordinates (same for all sprites in that chain)
	move.w	d5,d0
	move.w	d4,d1
	bsr		show_sprite

	* next sprite for this image
	lea		(actsprite_second_sprite.W,a4),a4
	bra	5b
21:
	movem.l	(a7)+,d6/a2/a4-a6
	rts
	



osd_stars_on:
	rts
osd_stars_off:
	rts
	
old_intena:
	.long	0
old_dmacon:
	.long	0
old_sysvectors:
	ds.l	8
old_vbr:
	.long	0
old_syscoplist:
	.long	0
old_actiview:
	.long	0
old_stack:
	.long	0
	
_tag:
		.long	WHDLTAG_CUSTOM1_GET
cheat_flags:
		.long	0
		.long	WHDLTAG_CUSTOM2_GET
difficulty_level:
	.long	0
		.long	WHDLTAG_CUSTOM4_GET
start_lives:
		.long	0
		.long	WHDLTAG_CUSTOM5_GET
start_area_option:
	.long	0
	.long	0

start_lives_dsw:
	.word	0
difficulty_level_dsw:
	.word	0
	
bit_UP = 0
bit_DOWN = 1
bit_LEFT = 2
bit_RIGHT = 3
flag_UP = 1<<bit_UP
flag_DOWN = 1<<bit_DOWN
flag_LEFT = 1<<bit_LEFT
flag_RIGHT = 1<<bit_RIGHT

.macro	JOY_BIT_SET	dir
	btst	#JPB_BTN_\dir,d1
	beq.b	1f
	bset	#bit_\dir,d0
1:
	.endm
	
		
osd_read_p1_inputs:
	move.l	_joypad_state(pc),d1
	moveq.l	#0,d0
	JOY_BIT_SET	UP
	JOY_BIT_SET	DOWN
	JOY_BIT_SET	LEFT
	JOY_BIT_SET	RIGHT
	lea		direction_table(pc),a0
	move.b	(a0,d0.w),d0
	or.b	#0xF0,d0	| sets 0xF0 (bits 4 & 5 inactive high)
	
	btst	#JPB_BTN_RED,d1
	beq.b	1f
	bclr	#5,d0	| fire, active low
	move.l	_previous_joypad_state_2(pc),d2
	btst	#JPB_BTN_RED,d2
	bne.b	1f		| was already pressed
	bclr	#4,d0	| first time fire press
1:
	move.l	d1,_previous_joypad_state_2
	rts

create_direction_table:
	lea		direction_table(pc),a0
	move.b	#0,(flag_UP,a0)
	move.b	#1,(flag_UP+flag_RIGHT,a0)
	move.b	#2,(flag_RIGHT,a0)
	move.b	#3,(flag_DOWN+flag_RIGHT,a0)
	move.b	#4,(flag_DOWN,a0)
	move.b	#5,(flag_DOWN+flag_LEFT,a0)
	move.b	#6,(flag_LEFT,a0)
	move.b	#7,(flag_UP+flag_LEFT,a0)
	move.b	#8,(a0)
	rts
	
direction_table:
	ds.b	16

* < d0.w: x
* < d1.w: y
* < d2.w: sprite height: 16, 32, 96 are supported
* > d0.L: control word
store_sprite_pos:
    movem.l  d2/a0-a1,-(a7)

    lea	HW_SpriteXTable(pc),a0
    lea	sprite_y_tables(pc),a1
	lsr.w	#2,d2
	subq.w	#4,d2
	and.w	#0xFC,d2
	* pick proper table depending on height
	move.l	(a1,d2.w),a1
	
	.ifdef	NO68020
    add.w	d0,d0
    add.w	d0,d0
    move.l	(a0,d0.w),d0
	move.w	d1,-(a7)
    add.w	d1,d1
    add.w	d1,d1
    or.l	(a1,d1.w),d0
	move.w	(a7)+,d1
	.else
    move.l	(a0,d0.w*4),d0
    or.l	(a1,d1.w*4),d0	
	.endc
    movem.l  (a7)+,d2/a0-a1
    rts
	
HW_SpriteXTable:
	.set	reptn,0
	.rept 320
	.set	x,reptn+0x80
	.set reptn,reptn+1
    .byte  0,x>>1,0,x&1
  .endr

	.macro DEF_HW_SPRITE_Y_TABLE	height
HW_SpriteYTable_\height:
  .set	reptn,0
  .rept NB_LINES
	.set	ys,reptn+0x1c
	.set	ye,ys+\height
    .byte  ys&255, 0, ye&255, ((ys>>6)&4)+((ye>>7)&2)
	.set	reptn,reptn+1
  .endr
	.endm

	DEF_HW_SPRITE_Y_TABLE	16
	DEF_HW_SPRITE_Y_TABLE	32


sprite_y_tables:
	.long	HW_SpriteYTable_16
	.long	HW_SpriteYTable_32
	
* set_bitplanes
* what: sets bitplanes in copperlist

set_bg_bitplanes:
    lea		bg_screen_data,a0
    moveq #NB_PLAYFIELD_PLANES-1,d1
	move.l	a0,d0
    lea	bg_bitplanes+2,a0
1:
    swap d0
    move.w d0,(a0)
    swap d0
    move.w d0,(4,a0)    
    addq.w  #8,a0
    add.l #BG_SCREEN_PLANE_SIZE,d0
    dbf d1,1b
    rts

set_fg_bitplanes:
    move.l		fg_displayed_screen_ptr(pc),a0
    moveq #NB_PLAYFIELD_PLANES-1,d1
	move.l	a0,d0
    lea	fg_bitplanes+2,a0
1:
    swap d0
    move.w d0,(a0)
    swap d0
    move.w d0,(4,a0)    
    addq.w  #8,a0
    add.l #FG_SCREEN_PLANE_SIZE,d0
    dbf d1,1b
    rts
	
input_map_tbl:
		.byte			0xf8															|  0, none
		.byte			0xf0															|  1, up
		.byte			0xf4															|  2, down
		.byte			0xf8															|  3, down+up (invalid)
		.byte			0xf6															|  4, left
		.byte			0xf7															|  5, left+up
		.byte			0xf5															|  6, left+down
		.byte			0xf8															|  7, left+down+up (invalid)
		.byte			0xf2															|  8, right
		.byte			0xf1															|  9, right+up
		.byte			0xf3															|  A, right+down
		.byte			0xf8															|  B, right+down+up (invalid)
		.byte			0xf8															|  C, right+left (invalid)
		.byte			0xf8															|  D, right+left+up (invalid)
		.byte			0xf8															|  E, right+left+down (invalid)
		.byte			0xf8															|  F, right+left+down+up (invalid)
		
osd_read_p2_inputs:
		*move.b    BIOS_P2CURRENT,d0                 | read IN1
		bra				osd_read_p1_inputs
		rts

osd_debug_hook:
	rts
	
* d0=DSWA, d1=DSWB

osd_read_dipswitches_old:
	move.w	#0x1F,d0
	* precomputed DSW bits
	or.w	start_lives_dsw(pc),d0
	


	**move.l	_joypad_state(pc),d2

	rts

* 6000: in D0
*    bits 0-1: coin1 & coin2
* 6800: in D1
*    bits 7-6: if both set, means FREE PLAY
* 1 COIN = 1 PLAY               OFF           OFF
* 2 COINS = 1 PLAY              ON            OFF
* 1 COIN = 2 PLAYS              OFF           ON
* FREE PLAY                     ON            ON 

* 7000: in D2
*    bits 0-1: Values for BONUS GALIXIP. 7 = 7000, 10 = 10000, 12 =12000, 20 = 20000
osd_read_dipswitches:
	moveq	#-1,d0
	*move.w	#0xC0,d1	| free play: 0xC0, insert coin doesn't work ATM
	move.w	#0x00,d1	| 1 coin 1 credit
	moveq	#0,d2

	movem.l	a0,-(a7)
	lea keyboard_table(pc),a0
	tst.b	(5,a0)		| "5" key like in MAME
	beq.b	0f
	bclr	#0,d0
0:
	tst.b	(6,a0)		| "6" key like in MAME
	beq.b	0f
	bclr	#1,d0
0:
	tst.b	(0,a0)		| "1" key like in MAME
	beq.b	0f
	bset	#0,d1
0:
	tst.b	(1,a0)		| "2" key like in MAME
	beq.b	0f
	bset	#1,d1
0:
	move.l	(a7)+,a0
	rts
	
osd_read_coin:
	movem.l	a0/d1/d2,-(a7)
	lea keyboard_table(pc),a0
	tst.b	(5,a0)		| "5" key like in MAME
	bne.b	0f
	move.b	#0,d0
	move.l	_joypad_state(pc),d1
	move.l	_previous_joypad_state(pc),d2

2:
	btst	#JPB_BTN_GRN,d1	
	beq.b	1f
	btst	#JPB_BTN_GRN,d2	
	bne.b	1f
0:
	clr.b	(5,a0)		| ack key

	bset	#0,d0
1:
	move.l	d1,_previous_joypad_state
	movem.l	(a7)+,a0/d1/d2
	rts
		
		
		* D0 bit0=P1, bit1=P2.
osd_read_start:
	move.l	d1,-(a7)
	move.b	#0,d0
	lea keyboard_table(pc),a0
	tst.b	(1,a0)		| "1" key like in MAME
	beq.b	0f
	clr.b	(1,a0)
	bra.b	2f
0:
	move.l	_joypad_state(pc),d1

	btst	#JPB_BTN_YEL,d1
	beq.b	1f
2:
	bset	#0,d0
1:
	move.l	(a7)+,d1
	tst.b	d0
	rts
		
osd_read_high_scores:
	movem.l	d0-d7/a0-a6,-(a7)
	move.l	a1,a4
	move.l	_resload(pc),d0
	beq.b	0f
	move.l	d0,a2
	move.l	a0,a3
	bsr		get_hiscore_name
 	jsr		resload_GetFileSize(a2)		
	tst.l	d0
	beq.b	1f
	bsr		get_hiscore_name
	move.l	a3,a1
	jsr		resload_LoadFile(a2)
	* set highest score entry
    move.b    (0,a3),(a4)+
    move.b    (1,a3),(a4)+
    move.b    (2,a3),(a4)+		
	bra.b	1f
0:
	tst.b	highscore_loaded
	beq.b	2f
	* from DOS: just copy buffer
	lea		high_score_buffer(pc),a1
	* set highest score entry
    move.b    (0,a1),(a4)+
    move.b    (1,a1),(a4)+
    move.b    (2,a1),(a4)+	
	move.l	#SCORE_FILE_SIZE/4-1,d0
2:
	move.l	(a1)+,(a0)+
	dbf		D0,2b

1:
	movem.l	(a7)+,d0-d7/a0-a6
	rts
	
osd_write_high_scores:
	movem.l	d0-d7/a0-a6,-(a7)
	tst.l	cheat_flags		| don't save score if cheat on
	bne.b	1f
	tst.l	start_area_option	| don't save score if cheat on
	bne.b	1f
	move.l	_resload(pc),d0
	beq.b	0f
	move.l	d0,a2
	move.l	#SCORE_FILE_SIZE,d0
	move.l	a0,a1
	bsr		get_hiscore_name
	jsr		resload_SaveFile(a2)
	bra.b	1f
0:
	* from DOS: just copy buffer
	lea		high_score_buffer(pc),a1
	move.l	#SCORE_FILE_SIZE/4-1,d0
2:
	move.l	(a0)+,(a1)+
	dbf		D0,2b
	st.b	highscore_needs_saving
1:
	movem.l	(a7)+,d0-d7/a0-a6
	rts


level2_interrupt:
	movem.l	D0/A0/A5,-(a7)
	LEA	0x00BFD000,A5
	MOVEQ	#0x08,D0
	AND.B	0x1D01(A5),D0
	BEQ.b	1f
	MOVE.B	0x1C01(A5),D0
	NOT.B	D0
	ROR.B	#1,D0		| raw key code here
    
    lea keyboard_table(pc),a0
	
    bclr    #7,d0
    seq (a0,d0.w)       | updates keyboard table
    bne.b   0f     | we don't care about key release
    
    cmp.b   #0x19,d0	| "P" key
    bne.b   0f

    bsr	toggle_pause
0:
	tst.l	_resload
	bne.b	0f
	cmp.b	#0x45,d0	| "ESC" key
	bne.b	0f
	BSET	#0x06,0x1E01(A5)
	moveq	#2,d0
	bsr	beamdelay
	BCLR	#0x06,0x1E01(A5)	| acknowledge key
	bra		quit_to_os
0:
	BSET	#0x06,0x1E01(A5)
	moveq	#2,d0
	bsr	beamdelay
	BCLR	#0x06,0x1E01(A5)	| acknowledge key

1:
	movem.l	(a7)+,d0/a0/a5
	move.w	#8,_custom+intreq
	rte
	
toggle_pause:
	* pause only within game
	tst.b	ingame_palette_loaded
	beq.b	0f
	eor.b   #1,pause_flag
0:
	rts
	
high_score_buffer:
	ds.b	SCORE_FILE_SIZE

highscore_needs_saving:
	.byte	0
highscore_loaded:
	.byte	0
	.align	2
	
keyboard_table:
	ds.b	0x100
scroll_and_dirty_rows_values:
	ds.w	0x20
	
pause_flag:
	dc.w	0
    
* < D0: numbers of vertical positions to wait
beamdelay:
0:
	move.w  d0,-(a7)
    move.b	0xdff006,d0	| VPOS
1:
	cmp.b	0xdff006,d0
	beq.s	1b
	move.w	(a7)+,d0
	dbf	d0,0b
	rts
	
* < A5: custom
* < D0,D1: x,y
* < A1: plane pointer
* < D2: width in bytes (inc. 2 extra for shifting)
* < D4: blit height
* trashes D0-D6
* > A1: even address where blit was done
clear_plane_any_blitter_internal:
	moveq	#1,d3
* < A5: custom
* < D0,D1: x,y
* < A1: foreground plane pointer (often first plane!)
* < D2: width in bytes (inc. 2 extra for shifting)
* < D3: number of planes to clear
* < D4: blit height
* < D7: mask (disabled, -1 set at start)
* trashes D0-D6
clear_planes_any_blitter_internal:
    * pre-compute the maximum of shit here
	move.w	d1,d6
    beq.b   1f    | optim
	* check if y start + height > Y_MAX
	* (ignores case where y = 0, no risk)
	add.w	d4,d6
	sub.w	#Y_MAX,d6
	bmi.b	0f
	* y start + height > Y_MAX: clip height
	sub.w	d6,d4
	beq.b	10f
	bpl.b	0f
10:
	* null or negative height after clipping: out
	rts
0:
    lea mulNB_BYTES_PER_ROW_table(pc),a2
    add.w   d1,d1
    move.w  (a2,d1.w),d1
1:
    move.l  #0x01000000,d5   | minterm useD & rect clear (0xA) 
    move    d0,d6
    beq.b   2f
    MOVEQ #15,D6
    AND.W D0,D6
    and.w   #0x1F0,d0
    lsr.w   #3,d0
    add.w   d0,d1
    LSL.W #8,D6
    LSL.W #4,D6

    swap    d6
    or.l    d6,d5            | add shift
2:   
    add.w   d1,a1       | plane position (always even)

	move.w #NB_BYTES_PER_ROW,d0
    sub.w   d2,d0       | blit width

    lsl.w   #6,d4
    lsr.w   #1,d2
    add.w   d2,d4       | blit height

    * now just wait for blitter ready to write all registers
	WAIT_BLIT
    
    * blitter registers set
	.ifdef	VARIABLE_BLITTER_MASKS_AND_MODS
    move.l  d7,bltafwm(a5)
	.endif
	
	move.l d5,bltcon0(a5)	
    move.w  d0,bltdmod(a5)	|D modulo
	
	subq	#1,d3
	beq.b	4f
	subq	#1,d3
3:
	move.l a1,bltdpt(a5)	|destination top left corner
	move.w  d4,bltsize(a5)	|rectangle size, starts blit
	lea		(FG_SCREEN_PLANE_SIZE,a1),a1
	WAIT_BLIT
	dbf		d3,3b
4:
	move.l a1,bltdpt(a5)	|destination top left corner
	move.w  d4,bltsize(a5)	|rectangle size, starts blit
	
    rts



	
* what: blits 16x16 data on fg planes, cookie cut
* args:
* < A0: data (16 pixels wide, 2+1 planes)
* < D0: X
* < D1: Y
* < D2: bit 6: 0: direct, 1: flip
* trashes: D0-D1

blit_16x16_bob:
	movem.l	d2-d6/a0-a5,-(a7)
	move.w	#16,d3		| height = 16 (fixed)
	* first check if Y is positive
	moveq	#0,d6	| bitmap offset
	tst		d1
	bpl.b	10f
	* Y is negative, handle the Y-clipping 
	* or completely zap the blit
	add.w	d1,d3
	bmi.b	2f
	beq.b	2f		| no need to blit if height <= 0
	* compute offset to add to bitmap
	neg		d1    | make it positive
	* add a 4-byte offset per line (16 pixels = 32 bits)
	move.w	d1,d3
	add.w	d3,d3
	add.w	d3,d3
	add.w	d3,a0
	moveq	#0,d1	| draw from Y=0
10:
	move.l	fg_drawed_screen_ptr(pc),a1
	lea		blit_planes_cookie_cut_16x(pc),a5
	btst	#6,d2
	beq.b	0f
	lea		blit_planes_cookie_cut_16x_flipped(pc),a5	
0:
	lea		(3*BOB_16X16_PLANE_SIZE,a0),a3		| mask is the last plane, only 2 planes for BOBs
	jsr		(a5)

2:
	movem.l	(a7)+,d2-d6/a0-a5
	rts
	

* what: blits 16x16 data on one plane, cookie cut, flip
* args:
* < A0: data (16x16)
* < A1: plane  (40 rows) & background (40 rows) to mix with cookie cut
* < A3: source mask for cookie cut (16x16)
* < D0: X
* < D1: Y
* < D3: height
* trashes: a lot!

blit_planes_cookie_cut_16x_flipped:
    lea _custom,A5
	move.w	d3,d4
	neg.w	d4
	moveq	#3,d3		| 3 planes
    moveq  #4,d2       | 16 pixels + 2 shift bytes
    jra blit_planes_any_internal_cookie_cut

* what: blits 16x16 data on one plane, cookie cut
* args:
* < A0: data (16x16)
* < A1: plane  (40 rows)& background (40 rows) to mix with cookie cut
* < A3: source mask for cookie cut (16x16)
* < D0: X
* < D1: Y
* < D3: height
* trashes: D0-D1

blit_planes_cookie_cut_16x:
    lea _custom,A5
	move.w	d3,d4
	moveq	#3,d3		| 3 planes
    moveq  #4,d2       | 16 pixels + 2 shift bytes
* < A5: custom
* < D0.W,D1.W: x,y
* < A0: source
* < A1: destination plane, also background to mix with cookie cut fg plane
* < A3: source mask for cookie cut
* < D2: width in bytes (inc. 2 extra for shifting)
* < D3: number of planes
* < D4: height. If negative, source is copied with negative modulo (flip)
* < D7: blit mask (not considered, optim, -1 all through the game)
       
* blit mask set

blit_planes_any_internal_cookie_cut:
    movem.l d0-d7/a0-a6,-(a7)
	
    * pre-compute the maximum of shit here
	tst.w	d4
	bpl.b	1f
	sub.w	d4,d1	| pre-add height to d1
	subq.w	#1,d1	| minus one
1:	
	tst	d1
    beq.b   2f    | optim
    lea		mulNB_BYTES_PER_ROW_table(pc),a4
	.ifdef	NO68020
	add.w	d1,d1
    move.w  (a4,d1.w),d1	| y times 40
	.else
    move.w  (a4,d1.w*2),d1	| y times 40
	.endif
2:
	move.l  #0x0fca0000,d5    | B+C-A->D cookie cut   

    move    d0,d6
    beq.b   4f
    lsr.w   #3,d0
	bclr	#0,d0
    and.w   #0xF,d6
	beq.b	3f

    lsl.l   #8,d6
    lsl.l   #4,d6
    or.w    d6,d5            | add shift to mask (bplcon1)
    swap    d6
    clr.w   d6
    or.l    d6,d5            | add shift
3:   
    add.w   d0,d1
    
4:
    * make offset even. Blitter will ignore odd address
    * but a 68000 CPU doesn't and since we RETURN A1...
    bclr    #0,d1
    add.w   d1,a1       | plane position (D1 < 0x7FFF, 288*40=0x2D00)

	move.w	#NB_BYTES_PER_ROW,d0
	tst.w	d4
	bpl.b	5f
	neg.w	d0
	neg.w	d4    | make d4 positive again
5:
    sub.w   d2,d0       | blit width
    lsl.w   #6,d4
    lsr.w   #1,d2
    add.w   d2,d4       | blit height

    * always the same settings (ATM)

    * now just wait for blitter ready to write all registers
	WAIT_BLIT
    
    * blitter registers set

	.ifdef	VARIABLE_BLITTER_MASKS_AND_MODS
    move.l  d7,bltafwm(a5)
	.endif
	move.l d5,bltcon0(a5)	| sets con0 and con1
	clr.w bltamod(a5)		|A modulo=bytes to skip between lines
	clr.w bltbmod(a5)		|B modulo=bytes to skip between lines
	
    move.w  d0,bltcmod(a5)	|C modulo
    move.w  d0,bltdmod(a5)	|D modulo
					
	subq	#1,d3
	beq.b	7f
	subq	#1,d3
6:
	move.l	a3,bltapt(a5)	|source graphic top left corner (mask)
	move.l	a0,bltbpt(a5)	|source graphic top left corner
	move.l	a1,bltcpt(a5)	|pristine background top (bottom) left corner
	move.l	a1,bltdpt(a5)	|destination top (bottom) left corner
	move.w  d4,bltsize(a5)	|rectangle size, starts blit
	lea		(FG_SCREEN_PLANE_SIZE,a1),a1
	add.w	#BOB_16X16_PLANE_SIZE,a0
	WAIT_BLIT
	dbf		d3,6b
7:
	move.l	a3,bltapt(a5)	|source graphic top left corner (mask)
	move.l	a0,bltbpt(a5)	|source graphic top left corner
	move.l	a1,bltcpt(a5)	|pristine background top (bottom) left corner
	move.l	a1,bltdpt(a5)	|destination top (bottom) left corner
	move.w  d4,bltsize(a5)	|rectangle size, starts blit
    
    movem.l (a7)+,d0-d7/a0-a6
    rts


	
	MUL_TABLE	NB_BYTES_PER_ROW,256

SPRITE_MEM_SIZE = 4
current_sprite_state:
	ds.b	SPRITE_MEM_SIZE*NB_SPRITES_TOTAL
previous_sprite_state_ptr:
	dc.l	previous_sprite_state_1
previous_sprite_state_1:
	ds.b	SPRITE_MEM_SIZE*NB_SPRITES_TOTAL
	.ifne	OPT_ENABLE_DOUBLE_BUFFERING
previous_sprite_state_2:
	ds.b	SPRITE_MEM_SIZE*NB_SPRITES_TOTAL
	.endif
	
rdargs_struct:
	dc.l	0
program_args:
	ds.l	40,0	
read_args_string:
	.ascii	"STARTLIVES/K/N,SKILL/K/N,STARTAREA/K/N,"
	.ascii	"INVINCIBLE/S,INFLIVES/S"
	.byte	0
	
unknown_tile_found:
	dc.b	0
unknown_sprite_found:
	dc.b	0
ingame_palette_loaded:
	dc.b	0
	.align	2
	* sound variables
sound_lock:
	.word	0
music_duration:
	.word	0
music_loops:
	.byte	0
music_volume:
	.byte	0
music_track_start_number:
	.word	0
music_playing:
	.byte	0
music_muted:
	.byte	0
music_pattern:
	.word	0
music_tick:
	.word	0
sound_muted:
	.word	0
intro_music_counter:
	.word	0
vbl_counter:
	.word	0
_resload:
	.long	0
_joypad_state:
	.long	0
_previous_joypad_state:
	.long	0
_previous_joypad_state_2:
	.long	0
_gfxbase:
	.long	0
_dosbase:
	.long	0
fg_drawed_screen_ptr:
	.long	fg_screen_data_1
fg_displayed_screen_ptr:
	.ifne	OPT_ENABLE_DOUBLE_BUFFERING
	.long	fg_screen_data_2
	.else
	.long	fg_screen_data_1
	.endif


* table accounting for amiga hardware sprites that the engine
* asked to display. Holds y-offset (for andor) & line backup
* (when y-offset is non-zero). Also holds pointers on sprite start
* and also on part of the copperlist which displays the sprite
* (so it can be reset when clipped sprite disappears)
*
* 64 bytes per sprite is enough to make access simple
* by shifting by ACTIVE_SPRITE_STRUCT_BITS
* each entry can hold up to 2 sprites (6-colored sprites)
*
* a lot of entries are unused, as only a few sprites are hardware ones

active_hw_sprite_display_table:
	ds.l	256*(1<<ACTIVE_SPRITE_STRUCT_BITS)

* simple structure 1 per hw sprite
* word: life (0: not active)
* long: sprite backup structure (needed to shut down the sprite)
* word: pad

active_hw_sprite_lifetime:
	ds.l	16

	
	.include	"sound_entries.68k"
	
dosname:
	.ascii	"dos.library"
	.byte	0
graphicsname:
	.ascii	"graphics.library"
	.byte	0
normal_hiscorename:
	.asciz	"galaxian.high"
floppy_file:
	.ascii	"floppy"
	.byte	0
_end_of_ng_code:
		
		.text
	.align 2
palette:
	.include "palette.68k"

		.bss

		.align 4
	

.align 2
irq_cnt:											ds.w		1
		.data

* 32 rows = 256 pixels
* table of the colors for fg tiles in the copperlist
	.set	row_offset,0
bg_color_table:
	.rept	29
	.long	color_row_0+4+row_offset
	.set	row_offset,row_offset+16
	.endr
	.long	color_row_30
	.set	row_offset,0
	.rept	6
	.long	color_row_30_plus+row_offset
	.set	row_offset,row_offset+16
	.endr

		.bsschip
	* some space to write tiles slightly outside screen
	* (scrolling requires it so it's seamless)
	ds.b	NB_BYTES_PER_ROW*12
bg_screen_backbuffer:
	ds.b	BG_SCREEN_SIZE
	ds.b	NB_BYTES_PER_ROW*12*3
	.align 0x8		| 8 else fmode=3 makes display wrong
bg_screen_data:
	ds.b	BG_SCREEN_SIZE
	ds.b	NB_BYTES_PER_ROW*12*3
	.align 0x8		| 8 else fmode=3 makes display wrong
fg_screen_data_1:
	ds.b	FG_SCREEN_SIZE
	
	* small margin (I suspect that gas is buggy with ds directive)
	* plus fg plane shifting can write one byte too far
	ds.b	100
	.ifne  OPT_ENABLE_DOUBLE_BUFFERING

	.align 0x8		| 8 else fmode first bits set (BPAGEM&BLP32) makes display wrong
fg_screen_data_2:
	ds.b	FG_SCREEN_SIZE
	
fg_tile_layer:
	ds.b	FG_SCREEN_PLANE_SIZE
	ds.b	NB_BYTES_PER_ROW*16
	* small margin (I suspect that gas is buggy with ds directive)
	* plus fg plane shifting can write one byte too far
	ds.b	100
	.endif
	.datachip
	
.macro	DECL_3_BITPLANES	bpoff_start
	.set	bpoff,\bpoff_start
	.rept	NB_PLAYFIELD_PLANES
	dc.w  0xe0+bpoff,0
	dc.w  0xe2+bpoff,0
	.set	bpoff,bpoff+8
	.endr
	.endm

.macro	DECL_16_COLORS	offset
	.set	colidx,\offset
	.rept	16
	dc.w	color+(colidx*2),0
	.set	colidx,colidx+1
	.endr
	.endm
	
debug_copperlist:
	dc.w	color
debug_color:
	dc.w	0
	dc.l	-2
	
	* main copperlist
copperlist:
fg_bitplanes:
	DECL_3_BITPLANES	4
bg_bitplanes:
	DECL_3_BITPLANES	0
copperlist_colors:
	DECL_16_COLORS	0
sprite_cols:
	DECL_16_COLORS	16
sprites:
    * #0
    .word    sprpt+0,0
    .word    sprpt+2,0
    * #1
    .word    sprpt+4,0
    .word    sprpt+6,0
    * #2
    .word    sprpt+8,0
    .word    sprpt+10,0
    * #3
    .word    sprpt+12,0
    .word    sprpt+14,0   
    * #4
    .word    sprpt+16,0
    .word    sprpt+18,0
    * #5
    .word    sprpt+20,0
    .word    sprpt+22,0
    * #6
    .word    sprpt+24,0
    .word    sprpt+26,0
    * #7
    .word    sprpt+28,0
    .word    sprpt+30,0
end_color_copper:
   * dynamic colors for fg tile color each 8 lines
	.set    beampos,0x1C01
	.set	start_color,color
color_row_0:
	.rept	29
	dc.w	beampos,0xFFFE
	dc.w	start_color+2,0 
	dc.w	start_color+4,0 
	dc.w	start_color+6,0   
	.set	beampos,beampos+0x800
	.endr
	* pal limit
    dc.w  0xFFDF,0xFFFE       | PAL wait (should be 0xFFDF but probably fmode=3 changes it)
    dc.w  0x0401,0xFFFE
	
color_row_30:
	dc.w	start_color+2,0 
	dc.w	start_color+4,0 
	dc.w	start_color+6,0   
    dc.w  0x0C01,0xFFFE           
	.set    testcol,0xF0
	.set    beampos,0x1401
	
color_row_30_plus:
	.rept	4
	dc.w	color+2,0 
	dc.w	color+4,0 
	dc.w	color+6,0   
	dc.w	beampos,0xFFFE
	.set	beampos,beampos+0x800
	.endr
 	dc.w	beampos+0x400,0xFFFE   | wait before interrupt, avoid losing last bobs lines
    dc.w	 intreq,0x8010
    dc.l    -2					
	

	* aligning on 8 bytes so .align will work
	* in the next datachip sections
	.align	8
	
_end_of_ng_data:
		