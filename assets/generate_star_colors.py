import bitplanelib,os

this_dir = os.path.abspath(os.path.dirname(__file__))

# adapted from MAME:
# https://github.com/mamedev/mame/blob/master/src/mame/galaxian/galaxian_v.cpp (around line 333)
RGB_MAXIMUM = 224

minval = RGB_MAXIMUM * 130 // 150
midval = RGB_MAXIMUM * 130 // 100
maxval = RGB_MAXIMUM * 130 // 60

starmap= [
            0,
            minval,
            minval + (255 - minval) * (midval - minval) // (maxval - minval),
            255 ]

m_star_color = [0]*64
m_star_color_rgb4 = [0]*64

def rgb_t(r,g,b):
    return (r<<16)+(g<<8)+b
def rgb4(*args):
    return bitplanelib.to_rgb4_color(args)

def BIT(i,nb):
    return bool(i & (1<<nb))

for i in range(64):
    # bit 5 = red @ 150 Ohm, bit 4 = red @ 100 Ohm
    bit0 = BIT(i, 5)
    bit1 = BIT(i, 4)
    r = starmap[(bit1 << 1) | bit0]

    # bit 3 = green @ 150 Ohm, bit 2 = green @ 100 Ohm
    bit0 = BIT(i, 3)
    bit1 = BIT(i, 2)
    g = starmap[(bit1 << 1) | bit0]

    # bit 1 = blue @ 150 Ohm, bit 0 = blue @ 100 Ohm
    bit0 = BIT(i, 1)
    bit1 = BIT(i, 0)
    b = starmap[(bit1 << 1) | bit0]

    # set the RGB color
    m_star_color[i] = rgb_t(r, g, b)
    m_star_color_rgb4[i] = rgb4(r, g, b)

with open(os.path.join(this_dir,"..","src","stars_palette.68k"),"w") as f:
    f.write("# generated by assets/{}\n".format(os.path.basename(__file__)))
    f.write("\t.global\t{0}\n{0}:".format("stars_palette_rgb24"))
    bitplanelib.dump_asm_bytes(m_star_color,f,mit_format=True,nb_elements_per_row=4,size=4)
    f.write("\n\t.global\t{0}\n{0}:".format("stars_palette_rgb4"))
    bitplanelib.dump_asm_bytes(m_star_color_rgb4,f,mit_format=True,nb_elements_per_row=8,size=2)
